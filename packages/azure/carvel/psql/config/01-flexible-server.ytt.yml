#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
#@ load("@ytt:regexp", "regexp")
#@ load("@ytt:ip", "ip")

#@ def tags(resource_tags=[]):
#@  tags_list = []
#@  tags_list.extend(data.values.global_tags)
#@  tags_list.extend(resource_tags)
#@  tags_map = { x["key"]: x["value"] for x in tags_list if x["key"] != "" and x["value"] != "" }
#@  return(tags_map)
#@ end

#@ flexibleServerK8SName    = data.values.name
#@ dbSecretName          = data.values.name
#@ resourceGroupK8SName  = data.values.name
#@ serviceAccountName      = data.values.name + "-reader"
#@ serviceAccountNamespace = data.values.namespace
#@ roleName                = data.values.name + "-reading"

#@ firewallRules = data.values.firewall_rules
#@ if len(firewallRules) == 0:
#@   firewallRules = [{"startIpAddress": "0.0.0.0", "endIpAddress": "0.0.0.0", "tags": []}]
#@ end

#@ mandatory_fields = [ "name", "location", "aso_controller_namespace" ]
#@ missing_fields = []
#@ for field in mandatory_fields:
#@   if len(data.values[field]) == 0:
#@     missing_fields.append(field)
#@   end
#@ end
#@ if data.values.resource_group.name == "":
#@   missing_fields.append("resource_group.name")
#@ end

#@ databaseName = "name" in data.values.database and data.values.database.name or data.values.name

#!@ if len(missing_fields) > 0:
#!@   assert.fail("Missing values for mandatory fields '{}'".format(missing_fields))
#!@ end
#@ if not regexp.match("^Standard_", data.values.server.instance_type):
#@   assert.fail("'instance_type' must follow the convention Standard_(VMname) (was: '{}')".format(data.values.server.instance_type))
#@ end
#@ if data.values.server.instance_tier not in ["Burstable", "GeneralPurpose", "Memory Optimized"]:
#@   assert.fail("'instance_tier' must be in [\"Burstable\", \"GeneralPurpose\", \"Memory Optimized\"] (was: '{}')".format(data.values.server.instance_tier))
#@ end
#@ if data.values.server.instance_storage_size_gb < 32 or data.values.server.instance_storage_size_gb > 16384:
#@   assert.fail("'instance_storage_size_gb' must be within 32 and 16384 (was: {})".format(data.values.server.instance_storage_size_gb))
#@ end

#@ if data.values.create_namespace and data.values.namespace:
---
apiVersion: v1
kind: Namespace
metadata:
  name: #@ data.values.namespace
#@ end
---
apiVersion: secretgen.k14s.io/v1alpha1
kind: Password
metadata:
  name: #@ dbSecretName
#@ if/end data.values.namespace:
  namespace: #@ data.values.namespace
spec:
  length: 64
  secretTemplate:
    type: Opaque
    stringData:
      password: $(value)
---
apiVersion: resources.azure.com/v1beta20200601
kind: ResourceGroup
metadata:
  name: #@ resourceGroupK8SName
#@ if/end data.values.namespace:
  namespace: #@ data.values.namespace
  annotations:
    serviceoperator.azure.com/operator-namespace: #@ data.values.aso_controller_namespace
#@ if/end data.values.resource_group.use_existing:
    serviceoperator.azure.com/reconcile-policy: skip
spec:
  azureName: #@ data.values.resource_group.name
  location: #@ data.values.location
  tags: #@ tags(data.values.resource_group.tags)
---
apiVersion: dbforpostgresql.azure.com/v1beta20210601
kind: FlexibleServersDatabase
metadata:
  name: #@ data.values.name
#@ if/end data.values.namespace:
  namespace: #@ data.values.namespace
spec:
  azureName: #@ databaseName
  owner:
    name: #@ flexibleServerK8SName
  charset: utf8
  tags: #@ tags(data.values.database.tags)

#@ fwRuleCounter = 0
#@ for rule in firewallRules:
#@   startAddr = ip.parse_addr(rule["startIpAddress"])
#@   endAddr = ip.parse_addr(rule["endIpAddress"])
--- 
apiVersion: dbforpostgresql.azure.com/v1beta20210601
kind: FlexibleServersFirewallRule
metadata:
  name: #@ data.values.name + "-" + str(fwRuleCounter)
#@ if/end data.values.namespace:
  namespace: #@ data.values.namespace
spec:
  owner:
    name: #@ flexibleServerK8SName
  startIpAddress: #@ startAddr.string()
  endIpAddress: #@ endAddr.string()
  tags: #@ tags(rule["tags"])
#@   fwRuleCounter += 1
#@ end  
---
apiVersion: dbforpostgresql.azure.com/v1beta20210601
kind: FlexibleServer
metadata:
  name: #@ flexibleServerK8SName
#@ if/end data.values.namespace:
  namespace: #@ data.values.namespace
spec:
  location: #@ data.values.location
  azureName: #@ data.values.server.name or flexibleServerK8SName
  owner:
    name: #@ resourceGroupK8SName
  version: #@ data.values.server.version
  sku:
    name: #@ data.values.server.instance_type
    tier: #@ data.values.server.instance_tier
  administratorLogin: #@ data.values.server.administrator_name
  administratorLoginPassword:
    name: #@ dbSecretName
    key: password
  storage:
    storageSizeGB: #@ data.values.server.instance_storage_size_gb
  tags: #@ tags(data.values.server.tags)
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: #@ serviceAccountName
#@ if/end serviceAccountNamespace:
  namespace: #@ serviceAccountNamespace
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: #@ roleName
#@ if/end data.values.namespace:
  namespace: #@ data.values.namespace
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  resourceNames:
  - #@ data.values.name
- apiGroups:
  - dbforpostgresql.azure.com
  resources:
  - flexibleservers
  - flexibleserversdatabases
  verbs:
  - get
  - list
  - watch
  resourceNames:
  - #@ data.values.name
- apiGroups:
  - resources.azure.com
  resources:
  - resourcegroups
  verbs:
  - get
  - list
  - watch
  resourceNames:
  - #@ resourceGroupK8SName
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: #@ roleName
#@ if/end data.values.namespace:
  namespace: #@ data.values.namespace
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: #@ roleName
subjects:
- kind: ServiceAccount
  name: #@ serviceAccountName
#@ if/end serviceAccountNamespace:
  namespace: #@ serviceAccountNamespace
---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretTemplate
metadata:
  name: #@ data.values.name + "-bindable"
#@ if/end data.values.namespace:
  namespace: #@ data.values.namespace
spec:
  serviceAccountName: #@ serviceAccountName
  inputResources:
  - name: server
    ref:
      apiVersion: dbforpostgresql.azure.com/v1alpha1api20210601
      kind: FlexibleServer
      name: #@ flexibleServerK8SName
  - name: db
    ref:
      apiVersion: dbforpostgresql.azure.com/v1alpha1api20210601
      kind: FlexibleServersDatabase
      name: #@ data.values.name
  - name: creds
    ref:
      apiVersion: v1
      kind: Secret     
      name: "$(.server.spec.administratorLoginPassword.name)"
  template:
    metadata:
      labels:
        app.kubernetes.io/component: #@ data.values.name
        app.kubernetes.io/instance: "$(.server.metadata.name)"
        services.apps.tanzu.vmware.com/class: azure-postgres
    type: servicebinding.io/postgresql
    stringData:
      type: postgresql
      port: "5432"
      database: "$(.db.status.name)"
      host: "$(.server.status.fullyQualifiedDomainName)"
      username: "$(.server.status.administratorLogin)"
    data:
      password: "$(.creds.data.password)"
