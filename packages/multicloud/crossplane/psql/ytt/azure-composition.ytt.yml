#@ load("@ytt:data", "data")
---

#@ load("shared.lib.yml", "labelsForSecret", "tfProviderConfig", "tfWorkspace")

apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: #@ data.values.providers.azure.name + "-" + data.values.cloudServiceBindingType
  labels:
    crossplane.io/xrd: #@ data.values.xrd.names.plural + "." + data.values.xrd.group
    provider: #@ data.values.providers.azure.name
    database: #@ data.values.cloudServiceBindingType
spec:
  writeConnectionSecretsToNamespace: #@ data.values.crossplane.namespace
  compositeTypeRef:
    apiVersion: #@ data.values.xrd.group + "/" + data.values.xrd.version
    kind: #@ data.values.xrd.names.kind
  resources:
  - #@ labelsForSecret("azure")
  - #@ tfProviderConfig(data.values.crossplane.namespace)
  - #@ tfWorkspace(data.values.crossplane.namespace)
  - name: resourcegroup
    base: 
      apiVersion: azure.upbound.io/v1beta1
      kind: ResourceGroup
      spec: {}    
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.location
      toFieldPath: spec.forProvider.location
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: status.resourceGroup
  - name: flexibleserver
    base:
      apiVersion: dbforpostgresql.azure.upbound.io/v1beta1
      kind: FlexibleServer
      spec:
        providerConfigRef:
          name: #@ data.values.providers.azure.configRef
        forProvider:
          resourceGroupNameSelector:
            matchControllerRef: true
          administratorLogin: psqladmin
          skuName: GP_Standard_D4s_v3
          storageMb: 32768
          administratorPasswordSecretRef:
            key: password
            name: ""
            namespace: #@ data.values.crossplane.namespace
          location: ""
          version: "" #! 11,12 and 13 are supported
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.location
      toFieldPath: spec.forProvider.location
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.version
      toFieldPath: spec.forProvider.version
      transforms:
      - type: map
        map:
          "11": "11"
          "12": "12"
          "13": "13"
          "14": "13"
          "15": "13"
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.forProvider.administratorPasswordSecretRef.name
      transforms:
      - string:
          fmt: '%s-postgresql-admin'
          type: Format
        type: string
    connectionDetails:
    - name: type
      value: postgresql
    - name: provider
      value: azure
    - name: database
      value: postgres
    - name: username
      fromFieldPath: spec.forProvider.administratorLogin
    - name: host
      fromFieldPath: status.atProvider.fqdn
    - name: port
      type: FromValue
      value: "5432"
  - name: flexibleserverconfig
    base:
      apiVersion: dbforpostgresql.azure.upbound.io/v1beta1
      kind: FlexibleServerConfiguration
      spec:
        providerConfigRef:
          name: #@ data.values.providers.azure.configRef
        forProvider:
          serverIdSelector:
            matchControllerRef: true
          name: backslash_quote
          value: "on"
  - name: flexibleserverdatabase
    base:
      apiVersion: dbforpostgresql.azure.upbound.io/v1beta1
      kind: FlexibleServerDatabase
      spec:
        providerConfigRef:
          name: #@ data.values.providers.azure.configRef
        forProvider:
          serverIdSelector:
            matchControllerRef: true
          charset: ""
          collation: ""
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.charset
      toFieldPath: spec.forProvider.charset
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.collation
      toFieldPath: spec.forProvider.collation
  - name: firewallrule
    base:
      apiVersion: dbforpostgresql.azure.upbound.io/v1beta1
      kind: FlexibleServerFirewallRule
      spec:
        providerConfigRef:
          name: #@ data.values.providers.azure.configRef
        forProvider:
          serverIdSelector:
            matchControllerRef: true
          startIpAddress: ""
          endIpAddress: ""
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.firewallRule.startIpAddress
      toFieldPath: spec.forProvider.startIpAddress
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.firewallRule.endIpAddress
      toFieldPath: spec.forProvider.endIpAddress

