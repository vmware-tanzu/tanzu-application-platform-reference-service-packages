#@ def subnetGroupNameMatcher():

#@ end

---
#@ def rdsInstance(crossplaneNamespace, providerConfigRef, publiclyAccessible):
name: rdsinstance
base:
  apiVersion: rds.aws.upbound.io/v1beta1
  kind: Instance
  spec:
    forProvider:
      engine: postgres
      instanceClass: db.t3.micro
      passwordSecretRef: 
        key: password
        namespace: #@ crossplaneNamespace
      publiclyAccessible: #@ publiclyAccessible
      skipFinalSnapshot: true
      storageEncrypted: false
      allocatedStorage: 10
      vpcSecurityGroupIdSelector:
        matchControllerRef: true
      #@ if/end publiclyAccessible: 
      dbSubnetGroupNameSelector:
        matchControllerRef: true
    providerConfigRef:
      name: #@ providerConfigRef
patches:
#@ if/end not publiclyAccessible: 
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.aws.dbSubnetGroupName
  toFieldPath: spec.forProvider.dbSubnetGroupName
- type: FromCompositeFieldPath
  fromFieldPath: metadata.uid
  toFieldPath: spec.forProvider.passwordSecretRef.name
  transforms:
    - type: string
      string:
        type: Format
        fmt: '%s-postgresql-admin'
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.version
  toFieldPath: spec.forProvider.engineVersion
  transforms:
  - type: map
    map:
      "11": "11.17"
      "12": "12.12"
      "13": "13.8"
      "14": "14.5"
      "15": "14.5"
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.location
  toFieldPath: spec.forProvider.region
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.adminUsername
  toFieldPath: spec.forProvider.username
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.database
  toFieldPath: spec.forProvider.dbName
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.storageClass
  toFieldPath: spec.forProvider.storageType
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.collation
  toFieldPath: spec.forProvider.collation
connectionDetails:
- name: type
  value: postgresql
- name: provider
  value: aws
- name: port
  value: "5432"
- name: database
  fromFieldPath: spec.forProvider.dbName
  type: FromFieldPath
- name: username
  fromFieldPath: spec.forProvider.username
  type: FromFieldPath
- name: host
  fromFieldPath: status.atProvider.address
  type: FromFieldPath
- name: securitygroup
#@ end

---
#@ def securityGroup():
name: securitygroup
base:
  apiVersion: ec2.aws.upbound.io/v1beta1
  kind: SecurityGroup
patches:
- type: FromCompositeFieldPath
  fromFieldPath: metadata.name
  toFieldPath: spec.forProvider.name
- type: FromCompositeFieldPath
  fromFieldPath: metadata.name
  toFieldPath: spec.forProvider.description
  transforms:
  - string:
      fmt: 'Traffic to RDS instance %s'
      type: Format
    type: string
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.aws.vpcId
  toFieldPath: spec.forProvider.vpcId
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.location
  toFieldPath: spec.forProvider.region
#@ end

---
#@ def securityGroupRule():
name: securitygrouprule
base:
  apiVersion: ec2.aws.upbound.io/v1beta1
  kind: SecurityGroupRule
  spec:
    forProvider:
      fromPort: 5432
      toPort: 5432
      protocol: tcp
      securityGroupIdSelector:
        matchControllerRef: true
      type: ingress
patches:
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.aws.cidrBlocks
  toFieldPath: spec.forProvider.cidrBlocks
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.location
  toFieldPath: spec.forProvider.region
#@ end

---
#@ def subnetGroup():
name: subnetgroup
base: 
  apiVersion: rds.aws.upbound.io/v1beta1
  kind: SubnetGroup
  spec:
    forProvider:
      subnetIdSelector:
        matchControllerRef: true
      tags:
        Name: subnet group for RDS via crossplane
patches:
- type: FromCompositeFieldPath
  fromFieldPath: metadata.uid
  toFieldPath: metadata.name
  transforms:
    - type: string
      string:
        type: Format
        fmt: 'rds-sg-%s'
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.location
  toFieldPath: spec.forProvider.region
#@ end

---
#@ def subnet(nameSuffix, nameFormat, availabilityZoneFormat, cidrBlockField):
name: #@ "subnet" + nameSuffix
base: 
  apiVersion: ec2.aws.upbound.io/v1beta1
  kind: Subnet
patches:
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.aws.vpcId
  toFieldPath: spec.forProvider.vpcId
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.location
  toFieldPath: spec.forProvider.region
- type: FromCompositeFieldPath
  fromFieldPath: #@ cidrBlockField
  toFieldPath: spec.forProvider.cidrBlock
- type: FromCompositeFieldPath
  fromFieldPath: metadata.uid
  toFieldPath: metadata.name
  transforms:
    - type: string
      string:
        type: Format
        fmt: #@ nameFormat
- type: FromCompositeFieldPath
  fromFieldPath: metadata.uid
  toFieldPath: spec.forProfider.tags.Name
  transforms:
    - type: string
      string:
        type: Format
        fmt: #@ nameFormat
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.location
  toFieldPath: spec.forProvider.availabilityZone
  transforms:
    - type: string
      string:
        type: Format
        fmt: #@ availabilityZoneFormat
#@ end

---
#@ def routeTable():
name: routetable
base: 
  apiVersion: ec2.aws.upbound.io/v1beta1
  kind: RouteTable
  metadata:
    name: table
  spec:
    forProvider:
      tags:
        Name: RDS-via-Crossplane
patches:
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.aws.vpcId
  toFieldPath: spec.forProvider.vpcId
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.location
  toFieldPath: spec.forProvider.region
- type: FromCompositeFieldPath
  fromFieldPath: metadata.uid
  toFieldPath: metadata.name
  transforms:
    - type: string
      string:
        type: Format
        fmt: 'rds-%s'
#@ end

---
#@ def routeTableAssociation(nameSuffix, subnetNameFormat):
name: #@ "routeTableAssociation" + nameSuffix
base: 
  apiVersion: ec2.aws.upbound.io/v1beta1
  kind: RouteTableAssociation
  spec:
    forProvider:
      routeTableIdSelector:
        matchControllerRef: true
patches:
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.location
  toFieldPath: spec.forProvider.region
- type: FromCompositeFieldPath
  fromFieldPath: metadata.uid
  toFieldPath: metadata.name
  transforms:
    - type: string
      string:
        type: Format
        fmt: #@ subnetNameFormat
- type: FromCompositeFieldPath
  fromFieldPath: metadata.uid
  toFieldPath: spec.forProvider.subnetIdRef.name
  transforms:
    - type: string
      string:
        type: Format
        fmt: #@ subnetNameFormat
#@ end

---
#@ def route(routeFormat):
name: route
base: 
  apiVersion: ec2.aws.upbound.io/v1beta1
  kind: Route
  metadata:
    name: route
  spec:
    forProvider:
      destinationCidrBlock: 0.0.0.0/0
      routeTableIdSelector:
        matchControllerRef: true
patches:
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.location
  toFieldPath: spec.forProvider.region
- type: FromCompositeFieldPath
  fromFieldPath: spec.parameters.aws.public.gatewayId
  toFieldPath: spec.forProvider.gatewayId
- type: FromCompositeFieldPath
  fromFieldPath: metadata.uid
  toFieldPath: metadata.name
  transforms:
    - type: string
      string:
        type: Format
        fmt: #@ routeFormat
#@ end